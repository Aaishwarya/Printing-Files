import java.io.File; //imports File class from java.io
import java.lang.String; //imports String class from java.lang package

interface toListFiles
    {
        /**
         *This method prints all the files and sub-directories under the current directory and specifies their identity (i.e.Directory (d) or file(f)).
         *This method also prints the count of number files under a directory, both immediately and totally
         *Format: Total number of files under directory(or file)  Number of files immediately under directory (or file)  Absolute path of the file or directory
         */
        public void toCountRecNumOfFiles(File f);

        /**
         *This method counts the number of files of the specified type as well as the size (in bytes) each type of file occupies
         */
        public void toCountTypes(File f);
    }

public class TraverseDirectory implements toListFiles
{
    //static fields
    static String[] TYPES = new String[]{".jpg", ".png", ".gif", ".mp4", ".mp3", ".exe", ".psd", ".html", ".xml"};
    static int len=TYPES.length;
    static int countOfTypes[]=new int[len];
    static long sizeOfTypes[]=new long[len];
    static int recCount=0;

    //main method
    public static void main(String[] args)
    {
        long startTime=System.currentTimeMillis();
        File f=new File(".");
        TraverseDirectory obj=new TraverseDirectory();
        System.out.println("Printing details about identity of a file or directory, and number of files under them");
        obj.toCountRecNumOfFiles(f);
        System.out.println("Printing number and size of each type specified");
        obj.toCountTypes(f);
        System.out.println("Number of files of each specified type:");
        for(int i=0;i<len;i++)
        {
            System.out.println("TYPE "+TYPES[i]+" - "+countOfTypes[i]);
        }
        System.out.println("");
        System.out.println("Sizes(in bytes) of files of each specified type:");
        for(int i=0;i<len;i++)
        {
            System.out.println("TYPE "+TYPES[i]+" - "+sizeOfTypes[i]);
        }
        long endTime=System.currentTimeMillis();
        System.out.println("Total time taken by the program is: "+(endTime-startTime));
    }
    public void toCountRecNumOfFiles(File f)
    {
        if(f.isDirectory())
        {
            File[] paths=f.listFiles();
            int l=paths.length;
            int count=0;
            for(int i=0;i<l;i++)
            {
                if(paths[i].isDirectory()==false)
                {
                    count++;
                }
            }
            int tCount=toCountTotalNumOfFiles(f);
            System.out.println(tCount+" "+count+" d "+f.getAbsolutePath());
            recCount=0;
            for(int i=0;i<l;i++)
            {
                toCountRecNumOfFiles(paths[i]);
            }
        }
        else
        {
            System.out.println("0 0 f "+f.getAbsolutePath());
        }
    }

    public int toCountTotalNumOfFiles(File f)
    {
        if(f.isDirectory())
        {
            File[] paths=f.listFiles();
            int l=paths.length;
            for(int i=0;i<l;i++)
            {
                if(paths[i].isDirectory()==false)
                {
                    recCount++;
                }
                else
                {
                    toCountTotalNumOfFiles(paths[i]);
                }
            }
        }
        return recCount;
    }
    public void toCountTypes(File f)
    {
        if(f.isDirectory())
        {
            File[] paths=f.listFiles();
            int l=paths.length;
            for(int i=0;i<l;i++)
            {
                if(paths[i].isDirectory()==false)
                {
                    toCheckTypes(paths[i]);
                }
                else
                {
                    toCountTypes(paths[i]);
                }
            }
        }
        else
        {
            toCheckTypes(f);
        }
    }

    public void toCheckTypes(File f)
    {
        for(int i=0;i<len;i++)
        {
            if((f.toString()).toLowerCase().endsWith(TYPES[i]))
            {
                countOfTypes[i]++;
                sizeOfTypes[i]=sizeOfTypes[i]+f.getTotalSpace();
            }
        }
    }
}


